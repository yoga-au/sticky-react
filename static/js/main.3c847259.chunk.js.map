{"version":3,"sources":["Header.tsx","StickyNotes.tsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","rel","target","StickyNotes","useState","value","notesData","setNotesData","isEmpty","setIsEmpty","useEffect","length","newNote","useCallback","addNote","prevState","deleteNote","index","filterNote","filter","el","indexOf","onClick","map","minRows","onChange","ev","notesDataCopy","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OA+BeA,EA7BA,WACd,OACC,sBAAKC,UAAU,mBAAf,UACC,oBAAIA,UAAU,UAAd,0BACA,mBAAGA,UAAU,cAAb,4VAaA,mBAAGA,UAAU,kBAAkBC,KAAK,0CAA0CC,IAAI,aAAaC,OAAO,SAAtG,SACC,yBAAQH,UAAU,uBAAlB,UACE,cAAC,IAAD,IACA,sBAAMA,UAAU,iBAAhB,sC,yDCqESI,EAtFK,WAAM,MAMSC,mBAAkB,CAAC,CAAEC,MAAO,gCANrC,mBAMlBC,EANkB,KAMPC,EANO,OAQKH,oBAAkB,GARvB,mBAQlBI,EARkB,KAQTC,EARS,KAWzBC,qBAAU,WACgB,IAArBJ,EAAUK,OACbF,GAAW,WAAO,OAAO,KAEjBH,EAAUK,OAAS,GAC3BF,GAAW,WAAO,OAAO,OAExB,CAACH,IAGJ,IAAMM,EAAUC,uBAAY,WAC3BN,GAAa,WACZ,MAAO,CAAC,CAAEF,MAAO,oCAEhB,IAGGS,EAAUD,uBAAY,WAC3BN,GAAa,SAACQ,GAGb,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAEV,MAAO,qCAE9B,IAIGW,EAAaH,uBAAY,SAACI,GAI/B,IAAMC,EAAaZ,EAAUa,QAAO,SAACC,GAAD,OAAad,EAAUe,QAAQD,KAAQH,KAC3EV,GAAa,WACZ,OAAOW,OAGN,CAACZ,IAEJ,OACC,qBAAKP,UAAU,YAAf,SAOGS,EACC,yBAAQT,UAAU,oBAAoBuB,QAAU,WAAQV,KAAxD,UACA,cAAC,IAAD,IACA,mBAAGb,UAAU,eAAb,yBAEAO,EAAUiB,KAAI,SAACH,EAASH,GACxB,OACC,8BACC,sBAAKlB,UAAU,iBAAf,UACC,sBAAKA,UAAU,cAAf,UACC,wBAAQA,UAAU,sBAAsBuB,QAAU,WAAQR,KAA1D,SAAwE,cAAC,IAAD,MACxE,wBAAQf,UAAU,sBAAsBuB,QAAU,WAAQN,EAAWC,IAArE,SAAgF,cAAC,IAAD,SAEjF,cAAC,IAAD,CAAUlB,UAAU,YAAYyB,QAAU,GAAKnB,MAAQe,EAAGf,MAAQoB,SACjE,SAACC,GACA,IAAIC,EAAa,YAAOrB,GACxBA,EAAUW,GAAOZ,MAAQqB,EAAGxB,OAAOG,MACnCE,EAAaoB,iBClETC,MATf,WACE,OACE,sBAAK7B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCIS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3c847259.chunk.js","sourcesContent":["import GithubOutlined from '@ant-design/icons/GithubOutlined'\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<div className=\"header-container\">\r\n\t\t\t<h1 className=\"heading\">Sticky React</h1>\r\n\t\t\t<p className=\"description\">\r\n\t\t\t\tSticky react is mini project with a goal to replicate Sticky Notes behaviour in windows using ReactJS. You can try it by editing the initial notes and/or add new note by clicking plus icon, you can delete note by clicking the trash icon. Currently, it's still missing some sticky notes behaviour like resizeable width and color theme.\r\n\t\t\t</p>\r\n\r\n\t\t\t{/* <div className=\"drawback-container\">\r\n\t\t\t\t<h3>Drawback</h3>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>Not using any backend</li>\r\n\t\t\t\t\t<li>No resizeability (width/x-axis)</li>\r\n\t\t\t\t\t<li>Can't change color theme</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div> */}\r\n\r\n\t\t\t<a className=\"btn-source-link\" href=\"https://github.com/yoga-au/sticky-react\" rel=\"noreferrer\" target=\"_blank\">\r\n\t\t\t\t<button className=\"btn-reset btn-source\">\r\n\t\t\t\t\t\t<GithubOutlined />\r\n\t\t\t\t\t\t<span className=\"btn-source-txt\">\r\n\t\t\t\t\t\t\tGithub Homepage\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t</button>\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect, useCallback } from 'react'\r\nimport TextArea from 'react-textarea-autosize'\r\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\r\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined'\r\n\r\nconst StickyNotes = () => {\r\n\tinterface Notes {\r\n\t\tvalue: string\r\n\t}\r\n\r\n\t// state to hold notes value\r\n\tconst [notesData, setNotesData] = useState<Notes[]>([{ value: 'Start editing this note...' }])\r\n\t// state for checking is the notesData empty or not?\r\n\tconst [isEmpty, setIsEmpty] = useState<boolean>(false)\r\n\r\n\t// update isEmpty state when notesData hold zero object\r\n\tuseEffect(() => {\r\n\t\tif (notesData.length === 0) {\r\n\t\t\tsetIsEmpty(() => {return true})\r\n\t\t}\r\n\t\telse if (notesData.length > 0) {\r\n\t\t\tsetIsEmpty(() => {return false})\r\n\t\t}\r\n\t}, [notesData])\r\n\r\n\t// a handle to make new note, only used when all notes are empty/deleted\r\n\tconst newNote = useCallback(() => {\r\n\t\tsetNotesData(() => {\r\n\t\t\treturn [{ value: 'Start editing this note...' }]\r\n\t\t})\r\n\t}, [])\r\n\r\n\t// a handle to make new note, only used when there is notes existed\r\n\tconst addNote = useCallback(() => {\r\n\t\tsetNotesData((prevState) => {\r\n\t\t\t// using spread syntax to merge to previous state and new state\r\n\t\t\t// since useState hook is not auto merge\r\n\t\t\treturn [...prevState, { value: 'Start editing this note...' }]\r\n\t\t})\r\n\t}, [])\r\n\r\n\t// a handle to delete note\r\n\t// get index parameter from map method in return statement\r\n\tconst deleteNote = useCallback((index: number) => {\r\n\t\t// create new variable to store new array of object from filter method\r\n\t\t// notesData.indexOf(currentElement) to get index position in state\r\n\t\t// and compare it to index from map\r\n\t\tconst filterNote = notesData.filter((el: any) => notesData.indexOf(el) !== index)\r\n\t\tsetNotesData(() => {\r\n\t\t\treturn filterNote\r\n\t\t})\r\n\t\t// console.log(notesData[index])\r\n\t}, [notesData])\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{/* console log for debugging */}\r\n\t\t\t{/* { console.log(notesData) } */}\r\n\t\t\t{/* conditionaly check if isEmpty state true or false\r\n\t\t\t\tif true then it must be the notes are deleted, then render new note button\r\n\t\t\t\tif false it means there is notes data in notesData state, then render the note using map method\r\n\t\t\t*/}\r\n\t\t\t{ isEmpty\r\n\t\t\t\t?\t<button className=\"btn-reset btn-new\" onClick={ () => { newNote() } }>\r\n\t\t\t\t\t\t<PlusOutlined />\r\n\t\t\t\t\t\t<p className=\"btn-new-text\">New Note</p>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t:\tnotesData.map((el: any, index: number) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"note-container\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"note-action\">\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn-reset btn-style\" onClick={ () => { addNote() } }><PlusOutlined /></button>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn-reset btn-style\" onClick={ () => { deleteNote(index) } }><DeleteOutlined /></button>\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<TextArea className=\"note-body\" minRows={ 10 } value={ el.value } onChange={\r\n\t\t\t\t\t\t\t\t\t\t(ev) => {\r\n\t\t\t\t\t\t\t\t\t\t\tlet notesDataCopy = [...notesData]\r\n\t\t\t\t\t\t\t\t\t\t\tnotesData[index].value = ev.target.value\r\n\t\t\t\t\t\t\t\t\t\t\tsetNotesData(notesDataCopy)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}></TextArea>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default StickyNotes\r\n","import './App.css';\nimport Header from './Header';\nimport StickyNotes from './StickyNotes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <StickyNotes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@fontsource/work-sans';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}